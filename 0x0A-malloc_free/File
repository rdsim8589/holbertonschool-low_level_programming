
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="Holberton School">
    <link rel="icon" href="../../favicon.ico">
    <link href='https://fonts.googleapis.com/css?family=Lora:400,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

    <title>Holberton School's awesome intranet</title>

    <link rel="stylesheet" media="all" href="/assets/application-db3812a3f2ca9d0bad785735e12c914d1cd84a76ea29dae954e190aef0d9dbcc.css" />
    <script src="/assets/application-71ada8a5148781fe2ff333039fe59cb8821a17a8087c839eb1e6561643870f5f.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/assets/favicon-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.ico" />
  <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="DBWjpKifC5sJIstWLsrSuagpjjMaM47sKlSsLvTnfjHLN6/BcXM9n2RSOtTvbxE+MvawdGJ8Vw+4haLrqopL2w==" />

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body class="signed_in">

      <nav id="nav-left" class="hidden-xs title-font">
        <a href="/">
          <div id="holberton-logo">
            <img alt="Holberton School" src="/assets/holberton-logo-simplified-d4e8a1e8bf5ad93c8c3ce32895b4b53749b477b7ba7342d7f064e6883bcd3be2.png" />
          </div>
</a>        <ul>
            <li>
    <a href="/dashboards/my_planning">
        <div class="icon">
          <i class="fa fa-calendar"></i>
        </div>
      My planning
</a>  </li>
  <li>
    <a href="/dashboards/my_current_projects">
        <div class="icon">
          <i class="fa fa-list"></i>
        </div>
      My projects
</a>  </li>
  <li>
    <a href="/dashboards/my_concepts">
        <div class="icon">
          <i class="fa fa-file-text"></i>
        </div>
      My concepts
</a>  </li>
  <li>
    <a href="/dashboards/my_batchmates">
        <div class="icon">
          <i class="fa fa-users"></i>
        </div>
      My batchmates
</a>  </li>
  <li>
    <a href="/dashboards/corrections_i_can_make">
        <div class="icon">
          <i class="fa fa-check"></i>
        </div>
      QA reviews I can make
</a>  </li>
  <li>
    <a href="/dashboards/my_captain_log">
        <div class="icon">
          <i class="fa fa-book"></i>
        </div>
      My Captain's Logs
</a>  </li>
  <li>
    <a href="/dashboards/my_officers">
        <div class="icon">
          <i class="fa fa-building"></i>
        </div>
      My Officers
</a>  </li>
  <li>
    <a href="/dashboards/my_server">
        <div class="icon">
          <i class="fa fa-server"></i>
        </div>
      My Servers
</a>  </li>

<li>
  <a href="/users/my_profile">
      <div class="icon">
        <i class="fa fa-user"></i>
      </div>
    My profile
</a></li>

        </ul>
      </nav>

    <main>

        <nav class="navbar navbar-default navbar-main visible-xs">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="/">
                  <img alt="Holberton School" src="/assets/holberton-logo-simplified-d4e8a1e8bf5ad93c8c3ce32895b4b53749b477b7ba7342d7f064e6883bcd3be2.png" />
</a>            </div>
            <div id="navbar" class="collapse navbar-collapse">
              <ul class="nav navbar-nav">
                  <li>
    <a href="/dashboards/my_planning">
      My planning
</a>  </li>
  <li>
    <a href="/dashboards/my_current_projects">
      My projects
</a>  </li>
  <li>
    <a href="/dashboards/my_concepts">
      My concepts
</a>  </li>
  <li>
    <a href="/dashboards/my_batchmates">
      My batchmates
</a>  </li>
  <li>
    <a href="/dashboards/corrections_i_can_make">
      QA reviews I can make
</a>  </li>
  <li>
    <a href="/dashboards/my_captain_log">
      My Captain's Logs
</a>  </li>
  <li>
    <a href="/dashboards/my_officers">
      My Officers
</a>  </li>
  <li>
    <a href="/dashboards/my_server">
      My Servers
</a>  </li>

<li>
  <a href="/users/my_profile">
    My profile
</a></li>

              </ul>

              <ul class="nav navbar-nav navbar-right">
                <li class="dropdown">
                  <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Richard Sim <span class="caret"></span></a>
                  <ul class="dropdown-menu">
                    <li><a rel="nofollow" data-method="delete" href="/auth/sign_out">Log out</a></li>
                  </ul>
                </li>
              </ul>

            </div><!--/.nav-collapse -->
          </div>
        </nav>



      <article class="">
          <div class="alert alert-info sm-gap">You just released the optional tasks of this project. Have fun!</div>

        
<h1 class="gap">0x0A. C - malloc, free</h1>

<div id="project_id" style="display: none" data-project-id="222"></div>

<p class="sm-gap">
  <small>
    <i class="fa fa-folder-open"></i>
    Low-level programming &amp; Algorithm â€• Hatching out
  </small>
</p>

  <p>
    <em>
      <small>
        <i class="fa fa-user"></i> by Julien Barbier, co-founder at Holberton School
      </small>
    </em>
  </p>



  <p>
    <small>
      <i class="fa fa-calendar"></i>
        Ongoing project - started 11-08-2016, must end by 11-09-2016 (in about 16 hours)
        - <span id="student_task_done_percentage">you're 0</span>% done.
    </small>
  </p>

  <p>
    <small>
      <i class="fa fa-check-square"></i>
      QA review fully automated.
    </small>
  </p>




<article id="description" class="gap formatted-content">
  <h2>Readme</h2>

<p>Read or watch <a href="https://docs.google.com/presentation/d/1awucWwPvD8BU783JVqzDXeSerU7eB504M6xRKKZndAI/edit#slide=id.p">0x0a - malloc &amp; free - quick overview</a>, <a href="https://www.youtube.com/watch?v=xDVC3wKjS64">Dynamic memory allocation in C - malloc calloc realloc free</a> (stop at 6:50), and <a href="https://intranet.hbtn.io/concepts/62">Automatic and dynamic allocation, malloc and free</a> (&quot;String literals and .rodata (advanced)&quot; is not mandatory).</p>

<p>man <code>malloc</code>, <code>free</code>.</p>

<p>You do not have to learn about <code>calloc</code> and <code>realloc</code>.</p>

<h2>What you should learn from this project</h2>

<p>At the end of this project you are expected to be able to explain to anyone, without the help of Google:</p>

<ul>
<li>What is the difference between automatic and dynamic allocation</li>
<li>What is <code>malloc</code> and <code>free</code> and how to use them</li>
<li>Why and when use <code>malloc</code></li>
<li>How to use <code>valgrind</code> to check for memory leak</li>
</ul>

<h2>Requirements</h2>

<ul>
<li>Allowed editors: <code>vi</code>, <code>vim</code>, <code>emacs</code></li>
<li>All your files will be compiled on Ubuntu 14.04 LTS</li>
<li>Your programs and functions will be compiled with <code>gcc</code> using the flags <code>-Wall</code> <code>-Werror</code> <code>-Wextra</code> <code>and -pedantic</code></li>
<li>All your files should end with a new line</li>
<li>A <code>README.md</code> file, at the root of the folder of the project is mandatory</li>
<li>Your code should use the <code>Betty</code> style. It will be checked using <a href="https://github.com/holbertonschool/Betty/blob/master/betty-style.pl">betty-style.pl</a> and <a href="https://github.com/holbertonschool/Betty/blob/master/betty-doc.pl">betty-doc.pl</a></li>
<li>You are not allowed to use global variables</li>
<li>No more than 5 functions per file</li>
<li>The only C standard library functions allowed are <code>malloc</code> and <code>free</code>. Any use of functions like <code>printf</code>, <code>puts</code>, etc... is forbidden</li>
<li>You are allowed to use <a href="https://github.com/holbertonschool/_putchar.c/blob/master/_putchar.c">_putchar</a></li>
<li>You don&#39;t have to push <code>_putchar.c</code>, we will use our file. If you do it won&#39;t be taken into account</li>
<li>In the following examples, the <code>main.c</code> files are showed as examples. You can use them to test your functions, but you don&#39;t have to push them to your repo (if you do we won&#39;t take them into account). We will use our own <code>main.c</code> files at compilation. Our <code>main.c</code> files might be different from the one showed in the examples</li>
<li>The prototypes of all your functions and the prototype of the function <code>_putchar</code> should be included in your header file called <code>holberton.h</code></li>
<li>Don&#39;t forget to push your header file</li>
</ul>

</article>

  <hr class="gap">
  <h2 class="gap">Tasks</h2>
  <section class="formatted-content">
        <div data-role="task932" data-position="1">
            <div class=" clearfix gap" id="task-932">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="932">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="932" data-toggle="modal" data-target="#task-932-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-932-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "Float like a butterfly, sting like a bee"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/932/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="932" >
            Help!
          </button>
    </div>

  <h4 class="task">
    0. Float like a butterfly, sting like a bee
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that creates an array of chars, and initializes it with a specific char.</p>

<ul>
<li>Prototype: <code>char *create_array(unsigned int size, char c);</code></li>
<li>Returns a pointer to the array, or <code>NULL</code> if it fails</li>
</ul>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 0-main.c 
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
    unsigned int i;

    i = 0;
    while (i &lt; size)
    {
        if (i % 10)
        {
            printf(&quot; &quot;);
        }
        if (!(i % 10) &amp;&amp; i)
        {
            printf(&quot;\n&quot;);
        }
        printf(&quot;0x%02x&quot;, buffer[i]);
        i++;
    }
    printf(&quot;\n&quot;);
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    char *buffer;

    buffer = create_array(98, &#39;H&#39;);
    if  (buffer == NULL)
    {
        printf(&quot;failed to allocate memory\n&quot;);
        return (1);
    }
    simple_print_buffer(buffer, 98);
    free(buffer);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 0-main.c 0-create_array.c -o a
julien@ubuntu:~/0x0a. malloc, free$ ./a 
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
0x48 0x48 0x48 0x48 0x48 0x48 0x48 0x48
julien@ubuntu:~/0x0a. malloc, free$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>0-create_array.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task933" data-position="2">
            <div class=" clearfix gap" id="task-933">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="933">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="933" data-toggle="modal" data-target="#task-933-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-933-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "The woman who has no imagination has no wings"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/933/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="933" >
            Help!
          </button>
    </div>

  <h4 class="task">
    1. The woman who has no imagination has no wings
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that returns a pointer to a newly allocated space in memory, which contains a copy of the string given as a parameter.</p>

<ul>
<li>Prototype: <code>char *_strdup(char *str);</code></li>
<li>The <code>_strdup()</code> function returns a pointer to a new string which is a duplicate of the string <code>str</code>.  Memory for the new string is obtained with <code>malloc</code>, and can be freed with <code>free</code>.</li>
<li>On success, the <code>_strdup</code> function returns a pointer to the duplicated string.  It returns <code>NULL</code> if insufficient memory was available</li>
</ul>

<p>FYI: The standard library provides a similar function: <code>strdup</code>. Run <code>man memset</code> to learn more.</p>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 1-main.c
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s;

    s = _strdup(&quot;Holberton&quot;);
    if (s == NULL)
    {
        printf(&quot;failed to allocate memory\n&quot;);
        return (1);
    }
    printf(&quot;%s\n&quot;, s);
    free(s);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 1-main.c 1-strdup.c -o s
julien@ubuntu:~/0x0a. malloc, free$ ./s 
Holberton
julien@ubuntu:~/0x0a. malloc, free$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>1-strdup.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task934" data-position="3">
            <div class=" clearfix gap" id="task-934">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="934">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="934" data-toggle="modal" data-target="#task-934-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-934-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "He who is not courageous enough to take risks will accomplish nothing in life"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/934/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="934" >
            Help!
          </button>
    </div>

  <h4 class="task">
    2. He who is not courageous enough to take risks will accomplish nothing in life
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that concatenates two strings.</p>

<ul>
<li>Prototype: <code>char *string_concat(char *s1, char *s2);</code></li>
<li>The returned pointer shall point to a newly allocated space in memory, which contains <code>s1</code>, followed by <code>s2</code>, and null terminated</li>
<li>If the function fails, it should return <code>NULL</code></li>
</ul>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 2-main.c
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s;

    s = str_concat(&quot;Betty &quot;, &quot;Holberton&quot;);
    if (s == NULL)
    {
        printf(&quot;failed\n&quot;);
        return (1);
    }
    printf(&quot;%s\n&quot;, s);
    free(s);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 2-main.c 2-str_concat.c -o c
julien@ubuntu:~/c/curriculum_by_julien/holbertonschool-low_level_programming/0x0a. malloc, free$ ./c | cat -e
Betty Holberton$
julien@ubuntu:~/c/curriculum_by_julien/holbertonschool-low_level_programming/0x0a. malloc, free$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>2-str_concat.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task935" data-position="4">
            <div class=" clearfix gap" id="task-935">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="935">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="935" data-toggle="modal" data-target="#task-935-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-935-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "If you even dream of beating me you&#39;d better wake up and apologize"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/935/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="935" >
            Help!
          </button>
    </div>

  <h4 class="task">
    3. If you even dream of beating me you&#39;d better wake up and apologize
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that returns a pointer to a newly created 2 dimensional integers grid.</p>

<ul>
<li>Prototype: <code>int **alloc_grid(int width, int height);</code></li>
<li>Each element of the grid should be initialized to <code>0</code></li>
<li>If the function fails, it should return NULL</li>
</ul>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 3-main.c
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * print_grid - prints a grid of integers
 * @grid: the address of the two dimensional grid
 * @width: width of the grid
 * @height: height of the grid
 *
 * Return: Nothing.
 */
void print_grid(int **grid, int width, int height)
{
    int w;
    int h;

    h = 0;
    while (h &lt; height)
    {
        w = 0;
        while (w &lt; width)
        {
            printf(&quot;%d &quot;, grid[h][w]);
            w++;
        }
        printf(&quot;\n&quot;);
        h++;
    }   
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    int **grid;

    grid = alloc_grid(6, 4);
    if (grid == NULL)
    {
        return (1);
    }
    print_grid(grid, 6, 4);
    printf(&quot;\n&quot;);
    grid[0][3] = 98;
    grid[3][4] = 402;
    print_grid(grid, 6, 4);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 3-main.c 3-alloc_grid.c -o g
julien@ubuntu:~/0x0a. malloc, free$ ./g
0 0 0 0 0 0 
0 0 0 0 0 0 
0 0 0 0 0 0 
0 0 0 0 0 0 

0 0 0 98 0 0 
0 0 0 0 0 0 
0 0 0 0 0 0 
0 0 0 0 402 0 
julien@ubuntu:~/0x0a. malloc, free$
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>3-alloc_grid.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task936" data-position="5">
            <div class=" clearfix gap" id="task-936">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="936">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="936" data-toggle="modal" data-target="#task-936-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-936-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "It&#39;s not bragging if you can back it up"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/936/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="936" >
            Help!
          </button>
    </div>

  <h4 class="task">
    4. It&#39;s not bragging if you can back it up
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that frees a 2 dimensional grid previously created by <code>alloc_grid</code>.</p>

<ul>
<li>Prototype: <code>void free_grid(int **grid, int height);</code></li>
</ul>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 4-main.c
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * print_grid - prints a grid of integers
 * @grid: the address of the two dimensional grid
 * @width: width of the grid
 * @height: height of the grid
 *
 * Return: Nothing.
 */
void print_grid(int **grid, int width, int height)
{
    int w;
    int h;

    h = 0;
    while (h &lt; height)
    {
        w = 0;
        while (w &lt; width)
        {
            printf(&quot;%d &quot;, grid[h][w]);
            w++;
        }
        printf(&quot;\n&quot;);
        h++;
    }   
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    int **grid;

    grid = alloc_grid(6, 4);
    if (grid == NULL)
    {
        return (1);
    }
    print_grid(grid, 6, 4);
    printf(&quot;\n&quot;);
    grid[0][3] = 98;
    grid[3][4] = 402;
    print_grid(grid, 6, 4);
    free_grid(grid, 4);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 4-main.c 3-alloc_grid.c 4-free_grid.c -o f
julien@ubuntu:~/0x0a. malloc, free$ valgrind ./f
==5013== Memcheck, a memory error detector
==5013== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==5013== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5013== Command: ./f
==5013== 
0 0 0 0 0 0 
0 0 0 0 0 0 
0 0 0 0 0 0 
0 0 0 0 0 0 

0 0 0 98 0 0 
0 0 0 0 0 0 
0 0 0 0 0 0 
0 0 0 0 402 0 
==5013== 
==5013== HEAP SUMMARY:
==5013==     in use at exit: 0 bytes in 0 blocks
==5013==   total heap usage: 6 allocs, 6 frees, 1,248 bytes allocated
==5013== 
==5013== All heap blocks were freed -- no leaks are possible
==5013== 
==5013== For counts of detected and suppressed errors, rerun with: -v
==5013== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
julien@ubuntu:~/0x0a. malloc, free$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>4-free_grid.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task937" data-position="6">
            <div class=" clearfix gap" id="task-937">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="937">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="937" data-toggle="modal" data-target="#task-937-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-937-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "It isn&#39;t the mountains ahead to climb that wear you out; it&#39;s the pebble in your shoe"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/937/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="937" >
            Help!
          </button>
    </div>

  <h4 class="task">
    5. It isn&#39;t the mountains ahead to climb that wear you out; it&#39;s the pebble in your shoe
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that concatenates all the arguments of your program.</p>

<ul>
<li>Prototype: <code>char *argstostr(int ac, char **av);</code></li>
<li>Returns a pointer to a new string, or <code>NULL</code> if it failes</li>
<li>Each argument should be followed by a <code>\n</code> in the new string</li>
</ul>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 5-main.c
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(int ac, char *av[])
{
    char *s;

    s = argstostr(ac, av);
    if (s == NULL)
    {
        return (1);
    }
    printf(&quot;%s&quot;, s);
    free(s);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 5-main.c 5-argstostr.c -o args
julien@ubuntu:~/0x0a. malloc, free$ ./args I will &quot;show you&quot; how great I am
./args
I
will
show you
how
great
I
am
julien@ubuntu:~/0x0a. malloc, free$
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>5-argstostr.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task938" data-position="7">
            <div class=" clearfix gap" id="task-938">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="938">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="938" data-toggle="modal" data-target="#task-938-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-938-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "I will show you how great I am"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/938/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="938" >
            Help!
          </button>
    </div>

  <h4 class="task">
    6. I will show you how great I am
    <span class="alert alert-info mandatory-optional">
      #advanced
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that splits a string into words.</p>

<ul>
<li>Prototype: <code>char **strtow(char *str);</code></li>
<li>The function returns a pointer to an array of strings (words)</li>
<li>Each element of this array should contain a single word, null-terminated</li>
<li>The last element of the returned array should be <code>NULL</code></li>
<li>Words are separated by spaces</li>
<li>If your function fails, it should return <code>NULL</code></li>
</ul>

<pre><code>julien@ubuntu:~/0x0a. malloc, free$ cat 6-main.c
#include &quot;holberton.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/**
 * print_tab - Prints an array of string
 *
 * @tab: The array to print
 */
void print_tab(char **tab)
{
    int i;

    for (i = 0; tab[i] != NULL; ++i)
    {
        printf(&quot;%s\n&quot;, tab[i]);
    }
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: 1 if an error occurred, 0 otherwise
 */
int main(void)
{
    char **tab;

    tab = strtow(&quot;      Holberton School         #cisfun      &quot;);
    if (tab == NULL)
    {
        printf(&quot;Failed\n&quot;);
        return (1);
    }
    print_tab(tab);
    return (0);
}
julien@ubuntu:~/0x0a. malloc, free$ gcc -Wall -pedantic -Werror -Wextra 100-main.c 100-strtow.c -o strtow
julien@ubuntu:~/0x0a. malloc, free$ ./strtow | cat -e
Holberton$
School$
#cisfun$
julien@ubuntu:~/0x0a. malloc, free$
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0A-malloc_free</code></li>
        <li>File: <code>100-strtow.c</code></li>
    </ul>



  
      
</div>

        </div>
  </section>






      </article>

    </main>





    

      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-67152800-6', 'auto');
        ga('send', 'pageview');
      </script>

  </body>
</html>
