
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="Holberton School">
    <link rel="icon" href="../../favicon.ico">
    <link href='https://fonts.googleapis.com/css?family=Lora:400,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

    <title>Holberton School's awesome intranet</title>

    <link rel="stylesheet" media="all" href="/assets/application-db3812a3f2ca9d0bad785735e12c914d1cd84a76ea29dae954e190aef0d9dbcc.css" />
    <script src="/assets/application-61b15b5a41ec156b1d95d4aad997cc1cff950a845ea6486accc77444aca1bff6.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/assets/favicon-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.ico" />
  <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="fDaYJLyjzxawOxLu+GK6oMOWB/NNxslxmh8+D1nSmm67FJRBZU/5Et1L42w5x3knWUk5tDWJEJIIzjDKB7+vhA==" />

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body class="signed_in">

      <nav id="nav-left" class="hidden-xs title-font">
        <a href="/">
          <div id="holberton-logo">
            <img alt="Holberton School" src="/assets/holberton-logo-simplified-d4e8a1e8bf5ad93c8c3ce32895b4b53749b477b7ba7342d7f064e6883bcd3be2.png" />
          </div>
</a>        <ul>
            <li>
    <a href="/dashboards/my_planning">
        <div class="icon">
          <i class="fa fa-calendar"></i>
        </div>
      My planning
</a>  </li>
  <li>
    <a href="/dashboards/my_current_projects">
        <div class="icon">
          <i class="fa fa-list"></i>
        </div>
      My projects
</a>  </li>
  <li>
    <a href="/dashboards/my_concepts">
        <div class="icon">
          <i class="fa fa-file-text"></i>
        </div>
      My concepts
</a>  </li>
  <li>
    <a href="/dashboards/my_batchmates">
        <div class="icon">
          <i class="fa fa-users"></i>
        </div>
      My batchmates
</a>  </li>
  <li>
    <a href="/dashboards/corrections_i_can_make">
        <div class="icon">
          <i class="fa fa-check"></i>
        </div>
      QA reviews I can make
</a>  </li>
  <li>
    <a href="/dashboards/my_captain_log">
        <div class="icon">
          <i class="fa fa-book"></i>
        </div>
      My Captain's Logs
</a>  </li>
  <li>
    <a href="/dashboards/my_officers">
        <div class="icon">
          <i class="fa fa-building"></i>
        </div>
      My Officers
</a>  </li>
  <li>
    <a href="/dashboards/my_server">
        <div class="icon">
          <i class="fa fa-server"></i>
        </div>
      My Servers
</a>  </li>

<li>
  <a href="/users/my_profile">
      <div class="icon">
        <i class="fa fa-user"></i>
      </div>
    My profile
</a></li>

        </ul>
      </nav>

    <main>

        <nav class="navbar navbar-default navbar-main visible-xs">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="/">
                  <img alt="Holberton School" src="/assets/holberton-logo-simplified-d4e8a1e8bf5ad93c8c3ce32895b4b53749b477b7ba7342d7f064e6883bcd3be2.png" />
</a>            </div>
            <div id="navbar" class="collapse navbar-collapse">
              <ul class="nav navbar-nav">
                  <li>
    <a href="/dashboards/my_planning">
      My planning
</a>  </li>
  <li>
    <a href="/dashboards/my_current_projects">
      My projects
</a>  </li>
  <li>
    <a href="/dashboards/my_concepts">
      My concepts
</a>  </li>
  <li>
    <a href="/dashboards/my_batchmates">
      My batchmates
</a>  </li>
  <li>
    <a href="/dashboards/corrections_i_can_make">
      QA reviews I can make
</a>  </li>
  <li>
    <a href="/dashboards/my_captain_log">
      My Captain's Logs
</a>  </li>
  <li>
    <a href="/dashboards/my_officers">
      My Officers
</a>  </li>
  <li>
    <a href="/dashboards/my_server">
      My Servers
</a>  </li>

<li>
  <a href="/users/my_profile">
    My profile
</a></li>

              </ul>

              <ul class="nav navbar-nav navbar-right">
                <li class="dropdown">
                  <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Richard Sim <span class="caret"></span></a>
                  <ul class="dropdown-menu">
                    <li><a rel="nofollow" data-method="delete" href="/auth/sign_out">Log out</a></li>
                  </ul>
                </li>
              </ul>

            </div><!--/.nav-collapse -->
          </div>
        </nav>



      <article class="">
          <div class="alert alert-info sm-gap">You just released the optional tasks of this project. Have fun!</div>

        
<h1 class="gap">0x0E. C - Function pointers</h1>

<div id="project_id" style="display: none" data-project-id="226"></div>

<p class="sm-gap">
  <small>
    <i class="fa fa-folder-open"></i>
    Low-level programming &amp; Algorithm â€• Hatching out
  </small>
</p>

  <p>
    <em>
      <small>
        <i class="fa fa-user"></i> by Alexandre Gautier, Jr. Software Engineer at Holberton School &amp; Julien Barbier, co-founder at Holberton School
      </small>
    </em>
  </p>



  <p>
    <small>
      <i class="fa fa-calendar"></i>
        Ongoing project - started 11-16-2016, must end by 11-17-2016 (in about 14 hours)
        - <span id="student_task_done_percentage">you're 0</span>% done.
    </small>
  </p>

  <p>
    <small>
      <i class="fa fa-check-square"></i>
      QA review fully automated.
    </small>
  </p>




<article id="description" class="gap formatted-content">
  <h2>Readme</h2>

<p>Read or watch <a href="http://publications.gbdirect.co.uk/c_book/chapter5/function_pointers.html">Pointers to functions</a>, <a href="https://www.youtube.com/watch?v=ynYtgGUNelE">Function Pointers in C / C++</a>.</p>

<h2>What you should learn from this project</h2>

<p>At the end of this project you are expected to be able to explain to anyone, without the help of Google:</p>

<ul>
<li>What are function pointers and how to use them</li>
<li>What does a function pointer exaclty hold</li>
</ul>

<h2>Requirements</h2>

<ul>
<li>Allowed editors: <code>vi</code>, <code>vim</code>, <code>emacs</code></li>
<li>All your files will be compiled on Ubuntu 14.04 LTS</li>
<li>Your programs and functions will be compiled with <code>gcc</code> using the flags <code>-Wall</code> <code>-Werror</code> <code>-Wextra</code> <code>and -pedantic</code></li>
<li>All your files should end with a new line</li>
<li>A <code>README.md</code> file, at the root of the folder of the project is mandatory</li>
<li>Your code should use the <code>Betty</code> style. It will be checked using <a href="https://github.com/holbertonschool/Betty/blob/master/betty-style.pl">betty-style.pl</a> and <a href="https://github.com/holbertonschool/Betty/blob/master/betty-doc.pl">betty-doc.pl</a></li>
<li>You are not allowed to use global variables</li>
<li>No more than 5 functions per file</li>
<li>The only C standard library functions allowed are <code>malloc</code>, <code>free</code> and <code>exit</code>. Any use of functions like <code>printf</code>, <code>puts</code>, <code>calloc</code>, <code>realloc</code> etc... is forbidden</li>
<li>You are allowed to use <a href="https://github.com/holbertonschool/_putchar.c/blob/master/_putchar.c">_putchar</a></li>
<li>You don&#39;t have to push <code>_putchar.c</code>, we will use our file. If you do it won&#39;t be taken into account</li>
<li>In the following examples, the <code>main.c</code> files are showed as examples. You can use them to test your functions, but you don&#39;t have to push them to your repo (if you do we won&#39;t take them into account). We will use our own <code>main.c</code> files at compilation. Our <code>main.c</code> files might be different from the one showed in the examples</li>
<li>The prototypes of all your functions and the prototype of the function <code>_putchar</code> should be included in your header file called <code>function_pointers.h</code></li>
<li>Don&#39;t forget to push your header file</li>
<li>All your header files should be include guarded</li>
</ul>

</article>

  <hr class="gap">
  <h2 class="gap">Tasks</h2>
  <section class="formatted-content">
        <div data-role="task958" data-position="1">
            <div class=" clearfix gap" id="task-958">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="958">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="958" data-toggle="modal" data-target="#task-958-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-958-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "What&#39;s my name"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/958/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="958" >
            Help!
          </button>
    </div>

  <h4 class="task">
    0. What&#39;s my name
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that prints a name.</p>

<ul>
<li>Prototype: <code>void print_name(char *name, void (*f)(char *));</code></li>
</ul>

<pre><code>julien@ubuntu:~/0x0e. Function pointers$ cat 0-main.c
#include &lt;stdio.h&gt;
#include &quot;function_pointers.h&quot;

/**
 * print_name_as_is - prints a name as is
 * @name: name of the person
 *
 * Return: Nothing.
 */
void print_name_as_is(char *name)
{
    printf(&quot;Hello, my name is %s\n&quot;, name);
}

/**
 * print_name_uppercase - print a name in uppercase
 * @name: name of the person
 *
 * Return: Nothing.
 */
void print_name_uppercase(char *name)
{
    unsigned int i;

    printf(&quot;Hello, my uppercase name is &quot;);
    i = 0;
    while (name[i])
    {
        if (name[i] &gt;= &#39;a&#39; &amp;&amp; name[i] &lt;= &#39;z&#39;)
        {
            putchar(name[i] + &#39;A&#39; - &#39;a&#39;);
        }
        else
        {
            putchar(name[i]);
        }
        i++;
    }
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    print_name(&quot;Danton&quot;, print_name_as_is);
    print_name(&quot;Rick Harris&quot;, print_name_uppercase);
    printf(&quot;\n&quot;);
    return (0);
}
julien@ubuntu:~/0x0e. Function pointers$ gcc -Wall -pedantic -Werror -Wextra 0-main.c 0-print_name.c -o a
julien@ubuntu:~/0x0e. Function pointers$ ./a 
Hello, my name is Danton
Hello, my uppercase name is RICK HARRIS
julien@ubuntu:~/0x0e. Function pointers$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0E-function_pointers</code></li>
        <li>File: <code>0-print_name.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task959" data-position="2">
            <div class=" clearfix gap" id="task-959">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="959">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="959" data-toggle="modal" data-target="#task-959-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-959-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "If you spend too much time thinking about a thing, you&#39;ll never get it done"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/959/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="959" >
            Help!
          </button>
    </div>

  <h4 class="task">
    1. If you spend too much time thinking about a thing, you&#39;ll never get it done
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that executes a function given as a parameter on each element of an array.</p>

<ul>
<li>Prototype: <code>void array_iterator(int *array, size_t size, void (*action)(int));</code></li>
<li>where <code>size</code> is the size of the array</li>
<li>and <code>action</code> is a pointer to the function you need to use</li>
</ul>

<pre><code>julien@ubuntu:~/0x0e. Function pointers$ cat 1-main.c
#include &lt;stdio.h&gt;
#include &quot;function_pointers.h&quot;

/**
 * print_elem - prints an integer
 * @elem: the integer to print
 *
 * Return: Nothing.
 */
void print_elem(int elem)
{
    printf(&quot;%d\n&quot;, elem);
}

/**
 * print_elem_hex - prints an integer, in hexadecimal
 * @elem: the integer to print
 *
 * Return: Nothing.
 */
void print_elem_hex(int elem)
{
    printf(&quot;0x%x\n&quot;, elem);
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    int array[5] = {0, 98, 402, 1024, 4096};

    array_iterator(array, 5, &amp;print_elem);
    array_iterator(array, 5, &amp;print_elem_hex);
    return (0);
}
julien@ubuntu:~/0x0e. Function pointers$ gcc -Wall -pedantic -Werror -Wextra 1-main.c 1-array_iterator.c -o b
julien@ubuntu:~/0x0e. Function pointers$ ./b 
0
98
402
1024
4096
0x0
0x62
0x192
0x400
0x1000
julien@ubuntu:~//0x0e. Function pointers$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0E-function_pointers</code></li>
        <li>File: <code>1-array_iterator.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task960" data-position="3">
            <div class=" clearfix gap" id="task-960">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="960">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="960" data-toggle="modal" data-target="#task-960-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-960-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "To hell with circumstances; I create opportunities"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/960/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="960" >
            Help!
          </button>
    </div>

  <h4 class="task">
    2. To hell with circumstances; I create opportunities
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that searches for an integer.</p>

<ul>
<li>Prototype: <code>int int_index(int *array, int size, int (*cmp)(int));</code></li>
<li>where <code>size</code> is the number of elements in the array <code>array</code></li>
<li><code>cmp</code> is a pointer to the function to be used to compare values</li>
<li><code>int_index</code> returns the index of the first element for which the <code>cmp</code> function does not return <code>0</code></li>
<li>If no element matches, return <code>-1</code></li>
<li>If size &lt;= <code>0</code>, return <code>-1</code></li>
</ul>

<pre><code>julien@ubuntu:~/0x0e. Function pointers$ cat 2-main.c
#include &lt;stdio.h&gt;
#include &quot;function_pointers.h&quot;

/**
 * is_98 - check if a number is equal to 98
 * @elem: the integer to check
 *
 * Return: 0 if false, something else otherwise.
 */
int is_98(int elem)
{
    return (98 == elem);
}

/**
 * is_strictly_positive - check if a number is greater than 0
 * @elem: the integer to check
 *
 * Return: 0 if false, something else otherwise.
 */
int is_strictly_positive(int elem)
{
    return (elem &gt; 0);
}


/**
 * abs_is_98 - check if the absolute value of a number is 98
 * @elem: the integer to check
 *
 * Return: 0 if false, something else otherwise.
 */
int abs_is_98(int elem)
{
    return (elem == 98 || -elem == 98);
}

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    int array[20] = {0, -98, 98, 402, 1024, 4096, -1024, -98, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 98};
    int index;

    index = int_index(array, 20, is_98);
    printf(&quot;%d\n&quot;, index);
    index = int_index(array, 20, abs_is_98);
    printf(&quot;%d\n&quot;, index);
    index = int_index(array, 20, is_strictly_positive);
    printf(&quot;%d\n&quot;, index);
    return (0);
}
julien@ubuntu:~/0x0e. Function pointers$ gcc -Wall -pedantic -Werror -Wextra 2-main.c 2-int_index.c -o c
julien@ubuntu:~/0x0e. Function pointers$ ./c 
2
1
2
julien@ubuntu:~/0x0e. Function pointers$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0E-function_pointers</code></li>
        <li>File: <code>2-int_index.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task961" data-position="4">
            <div class=" clearfix gap" id="task-961">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="961">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="961" data-toggle="modal" data-target="#task-961-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-961-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "A goal is not always meant to be reached, it often serves simply as something to aim at"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/961/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="961" >
            Help!
          </button>
    </div>

  <h4 class="task">
    3. A goal is not always meant to be reached, it often serves simply as something to aim at
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a program that performs simple operations.</p>

<ul>
<li>You are allowed to use the standard library</li>
<li>Usage: <code>calc num1 operator num2</code></li>
<li>The program prints the result of the operation, followed by a new line</li>
<li><code>num1</code>, <code>num2</code> are integers. Use the <code>atoi</code> function to convert them to <code>int</code></li>
<li><code>operator</code> is one of the following:

<ul>
<li><code>+</code>: addition</li>
<li><code>-</code>: subtraction</li>
<li><code>*</code>: multiplication</li>
<li><code>/</code>: division</li>
<li><code>%</code>: modulo</li>
</ul></li>
<li>You can assume that the result of all operations can be stored in an <code>int</code></li>
<li>if the number of arguments is wrong, print <code>Error</code>, followed by a new line, and exit with the status <code>98</code></li>
<li>if the <code>operator</code> is none of the above, print <code>Error</code>, followed by a new line, and exit with the status <code>99</code></li>
</ul>

<p>This task requires that you create four different files.</p>

<p><strong>3-op_functions.c</strong></p>

<p>This file should contain the 5 following functions (not more):</p>

<ul>
<li><code>op_add</code>: returns the sum of <code>a</code> and <code>b</code>. Prototype: <code>int op_add(int a, int b);</code></li>
<li><code>op_sub</code>: returns the difference of <code>a</code> and <code>b</code>. Prototype: <code>int op_sub(int a, int b);</code></li>
<li><code>op_mul</code>: returns the product of <code>a</code> and <code>b</code>. Prototype: <code>int op_mul(int a, int b);</code></li>
<li><code>op_div</code>: returns the result of the division of <code>a</code> by <code>b</code>. Prototype: <code>int op_div(int a, int b);</code></li>
<li><code>op_mod</code>: returns the remainder of the division of <code>a</code> by <code>b</code>. Prototype: <code>int op_mod(int a, int b);</code></li>
</ul>

<p><strong>3-get_op_func.c</strong></p>

<p>This file should contain the function that selects the correct function to perform the operation asked by the user. You&#39;re not allowed to declare any other function.</p>

<ul>
<li>Prototype: <code>int (*get_op_func(char *s))(int, int);</code></li>
<li>where <code>s</code> is the operator passed as argument to the program</li>
<li>This function returns a pointer to the function that corresponds to the operator given as a parameter. Example: <code>get_op_func(&quot;+&quot;)</code> should return a pointer to the function <code>op_add</code></li>
<li>You are not allowed to use <code>switch</code> statements</li>
<li>You are not allowed to use <code>for</code> or <code>do ... while</code> loops</li>
<li>You are not allowed to use <code>goto</code></li>
<li>You are not allowed to use <code>else</code></li>
<li>You are not allowed to use more than one <code>if</code> statement in your code</li>
<li>You are not allowed to use more than one <code>while</code> loop in your code</li>
<li>If <code>s</code> does not match any of the 5 expected operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>), return <code>NULL</code></li>
</ul>

<p><strong>3-main.c</strong></p>

<p>This file should contain your <code>main</code> function only.</p>

<ul>
<li>You are not allowed to code any other function that <code>main</code> in this file</li>
<li>You are not allowed to directly call <code>op_add</code>, <code>op_sub</code>, <code>op_mul</code>, <code>op_div</code> or <code>op_mod</code> from the <code>main</code> function</li>
<li>You have to use <code>atoi</code> to convert arguments to <code>int</code></li>
<li>You are not allowed to use any kind of loop</li>
<li>You are allowed to use a maximum of 3 <code>if</code> statements</li>
</ul>

<p><strong>3-calc.h</strong></p>

<p>This file should contain all the function prototypes and data structures used by the program.</p>

<p><strong>Compilation and examples</strong></p>

<pre><code>julien@ubuntu:~/0x0e. Function pointers$ gcc -Wall -pedantic -Werror -Wextra 3-main.c 3-op_functions.c 3-get_op_func.c -o calc
julien@ubuntu:~/0x0e. Function pointers$ ./calc 1 + 1
2
julien@ubuntu:~/0x0e. Function pointers$ ./calc 97 + 1
98
julien@ubuntu:~/0x0e. Function pointers$ ./calc 1024 / 10
102
julien@ubuntu:~/0x0e. Function pointers$ ./calc 1024 &#39;*&#39; 98
100352
julien@ubuntu:~/0x0e. Function pointers$ ./calc 1024 &#39;\*&#39; 98
Error
julien@ubuntu:~/0x0e. Function pointers$ ./calc 1024 - 98
926
julien@ubuntu:~/0x0e. Function pointers$ ./calc 1024 &#39;%&#39; 98
44
julien@ubuntu:~/0x0e. Function pointers$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0E-function_pointers</code></li>
        <li>File: <code>3-main.c, 3-op_functions.c, 3-get_op_func.c, 3-calc.h</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task962" data-position="5">
            <div class=" clearfix gap" id="task-962">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="962">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="962" data-toggle="modal" data-target="#task-962-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-962-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "Most hackers are young because young people tend to be adaptable. As long as you remain adaptable, you can always be a good hacker"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/962/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="962" >
            Help!
          </button>
    </div>

  <h4 class="task">
    4. Most hackers are young because young people tend to be adaptable. As long as you remain adaptable, you can always be a good hacker
    <span class="alert alert-info mandatory-optional">
      #advanced
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a program that prints the <a href="https://en.wikipedia.org/wiki/Opcode">opcodes</a> of its own main function.</p>

<ul>
<li>You are allowed to use the standard library</li>
<li>Usage: <code>./main number_of_bytes</code></li>
<li>Output format:

<ul>
<li>the opcodes should be printed in hexadecimal, lowercase</li>
<li>each opcode is two char long</li>
<li>listing ends with a new line</li>
<li>see example</li>
</ul></li>
<li>You have to use <code>atoi</code> to convert the argument to an <code>int</code></li>
<li>If the number of argument is not the correct one, print <code>Error</code>, followed by a new line, and exit with the status 1</li>
<li>If the number of bytes is negative, print <code>Error</code>, followed by a new line, and exit with the status 2</li>
<li>You do not have to compile with any flags</li>
</ul>

<p>Note: if you want to translate your opcodes to assembly instructions, you can use, for instance <a href="http://udis86.sourceforge.net/">udcli</a>.</p>

<pre><code>julien@ubuntu:~/0x0e. Function pointers$ gcc 100-main_opcodes.c -o main
julien@ubuntu:~/0x0e. Function pointers$ ./main 21
55 48 89 e5 48 83 ec 30 89 7d dc 48 89 75 d0 83 7d dc 02 74 14
julien@ubuntu:~/0x0e. Function pointers$ objdump -d -j.text -M intel main
[...]
00000000004005f6 &lt;main&gt;:
  4005f6:   55                      push   rbp
  4005f7:   48 89 e5                mov    rbp,rsp
  4005fa:   48 83 ec 30             sub    rsp,0x30
  4005fe:   89 7d dc                mov    DWORD PTR [rbp-0x24],edi
  400601:   48 89 75 d0             mov    QWORD PTR [rbp-0x30],rsi
  400605:   83 7d dc 02             cmp    DWORD PTR [rbp-0x24],0x2
  400609:   74 14                   je     40061f &lt;main+0x29&gt;
[...]
julien@ubuntu:~/0x0e. Function pointers$ ./main 21 | udcli -64 -x -o 4005f6
00000000004005f6 55               push rbp                
00000000004005f7 4889e5           mov rbp, rsp            
00000000004005fa 4883ec30         sub rsp, 0x30           
00000000004005fe 897ddc           mov [rbp-0x24], edi     
0000000000400601 488975d0         mov [rbp-0x30], rsi     
0000000000400605 837ddc02         cmp dword [rbp-0x24], 0x2
0000000000400609 7414             jz 0x40061f             
julien@ubuntu:~/0x0e. Function pointers$ 
</code></pre>

<ul>
<li><em>Note 0: <code>je</code> is equivalent to <code>jz</code></em></li>
<li><em>Note 1: depending on how you write your <code>main</code> function, and on which machine you compile your program, the opcodes (and by extension the assembly code) might be different than the above example</em></li>
</ul>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0E-function_pointers</code></li>
        <li>File: <code>100-main_opcodes.c</code></li>
    </ul>



  
      
</div>

        </div>
  </section>






      </article>

    </main>





    

      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-67152800-6', 'auto');
        ga('send', 'pageview');
      </script>

  </body>
</html>
