
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="Holberton School">
    <link rel="icon" href="../../favicon.ico">
    <link href='https://fonts.googleapis.com/css?family=Lora:400,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

    <title>Holberton School's awesome intranet</title>

    <link rel="stylesheet" media="all" href="/assets/application-db3812a3f2ca9d0bad785735e12c914d1cd84a76ea29dae954e190aef0d9dbcc.css" />
    <script src="/assets/application-21492fa1aa946960c1d32fe3459219bc8a46b85c04f16bded63129b5a434a617.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/assets/favicon-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.ico" />
  <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="ZSR2OoHsNTln11yySFK6IW2uzD0iiVy6LV3em7pZgLaiBnpfWAADPQqnrTCJ93mm93HyelrGhVm/jNBe5DS1XA==" />

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body class="signed_in">

      <nav id="nav-left" class="hidden-xs title-font">
        <a href="/">
          <div id="holberton-logo">
            <img alt="Holberton School" src="/assets/holberton-logo-simplified-d4e8a1e8bf5ad93c8c3ce32895b4b53749b477b7ba7342d7f064e6883bcd3be2.png" />
          </div>
</a>        <ul>
            <li>
    <a href="/dashboards/my_planning">
        <div class="icon">
          <i class="fa fa-calendar"></i>
        </div>
      My planning
</a>  </li>
  <li>
    <a href="/dashboards/my_current_projects">
        <div class="icon">
          <i class="fa fa-list"></i>
        </div>
      My projects
</a>  </li>
  <li>
    <a href="/dashboards/my_concepts">
        <div class="icon">
          <i class="fa fa-file-text"></i>
        </div>
      My concepts
</a>  </li>
  <li>
    <a href="/dashboards/my_batchmates">
        <div class="icon">
          <i class="fa fa-users"></i>
        </div>
      My batchmates
</a>  </li>
  <li>
    <a href="/dashboards/corrections_i_can_make">
        <div class="icon">
          <i class="fa fa-check"></i>
        </div>
      QA reviews I can make
</a>  </li>
  <li>
    <a href="/dashboards/my_captain_log">
        <div class="icon">
          <i class="fa fa-book"></i>
        </div>
      My Captain's Logs
</a>  </li>
  <li>
    <a href="/dashboards/my_officers">
        <div class="icon">
          <i class="fa fa-building"></i>
        </div>
      My Officers
</a>  </li>
  <li>
    <a href="/dashboards/my_speakers_of_the_day">
        <div class="icon">
          <i class="fa fa-microphone"></i>
        </div>
      My Speakers of the day
</a>  </li>
  <li>
    <a href="/dashboards/my_server">
        <div class="icon">
          <i class="fa fa-server"></i>
        </div>
      My Servers
</a>  </li>

<li>
  <a href="/users/my_profile">
      <div class="icon">
        <i class="fa fa-user"></i>
      </div>
    My profile
</a></li>

        </ul>
      </nav>

    <main>

        <nav class="navbar navbar-default navbar-main visible-xs">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="/">
                  <img alt="Holberton School" src="/assets/holberton-logo-simplified-d4e8a1e8bf5ad93c8c3ce32895b4b53749b477b7ba7342d7f064e6883bcd3be2.png" />
</a>            </div>
            <div id="navbar" class="collapse navbar-collapse">
              <ul class="nav navbar-nav">
                  <li>
    <a href="/dashboards/my_planning">
      My planning
</a>  </li>
  <li>
    <a href="/dashboards/my_current_projects">
      My projects
</a>  </li>
  <li>
    <a href="/dashboards/my_concepts">
      My concepts
</a>  </li>
  <li>
    <a href="/dashboards/my_batchmates">
      My batchmates
</a>  </li>
  <li>
    <a href="/dashboards/corrections_i_can_make">
      QA reviews I can make
</a>  </li>
  <li>
    <a href="/dashboards/my_captain_log">
      My Captain's Logs
</a>  </li>
  <li>
    <a href="/dashboards/my_officers">
      My Officers
</a>  </li>
  <li>
    <a href="/dashboards/my_speakers_of_the_day">
      My Speakers of the day
</a>  </li>
  <li>
    <a href="/dashboards/my_server">
      My Servers
</a>  </li>

<li>
  <a href="/users/my_profile">
    My profile
</a></li>

              </ul>

              <ul class="nav navbar-nav navbar-right">
                <li class="dropdown">
                  <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Richard Sim <span class="caret"></span></a>
                  <ul class="dropdown-menu">
                    <li><a rel="nofollow" data-method="delete" href="/auth/sign_out">Log out</a></li>
                  </ul>
                </li>
              </ul>

            </div><!--/.nav-collapse -->
          </div>
        </nav>


        <div id="captains_log_alert">
          <a href="/captain_logs/1157/edit">
            <div class="container">
              <p>
                You have a captain's log due before 2016-11-20 (in 2 days)! Log it now!
              </p>
            </div>
</a>        </div>

      <article class="pending_logs">
          <div class="alert alert-info sm-gap">You just released the optional tasks of this project. Have fun!</div>

        
<h1 class="gap">0x0F. C - Variadic functions</h1>

<div id="project_id" style="display: none" data-project-id="227"></div>

<p class="sm-gap">
  <small>
    <i class="fa fa-folder-open"></i>
    Low-level programming &amp; Algorithm â€• Hatching out
  </small>
</p>

  <p>
    <em>
      <small>
        <i class="fa fa-user"></i> by Julien Barbier, co-founder at Holberton School
      </small>
    </em>
  </p>



  <p>
    <small>
      <i class="fa fa-calendar"></i>
        Ongoing project - started 11-18-2016, must end by 11-21-2016 (in 3 days)
        - <span id="student_task_done_percentage">you're 0</span>% done.
    </small>
  </p>

  <p>
    <small>
      <i class="fa fa-check-square"></i>
      QA review fully automated.
    </small>
  </p>




<article id="description" class="gap formatted-content">
  <h2>Readme</h2>

<p>Read or watch: <a href="https://en.wikipedia.org/wiki/Stdarg.h">stdarg.h</a>, <a href="https://www.tutorialspoint.com/cprogramming/c_variable_arguments.htm">C - Variable Arguments</a>, <a href="http://www.cprogramming.com/tutorial/c/lesson17.html">Functions with Variable Argument Lists in C using va_list</a>, <a href="https://www.gnu.org/software/libc/manual/html_node/Variadic-Functions.html">Variadic Functions</a>, and <a href="https://www.youtube.com/watch?v=1W4oyuOdXv8">Const Keyword</a>.</p>

<p>man <code>stdarg</code></p>

<h2>What you should learn from this project</h2>

<p>At the end of this project you are expected to be able to explain to anyone, without the help of Google:</p>

<ul>
<li>What are variadic functions</li>
<li>How to use <code>va_start</code>, <code>va_arg</code> and <code>va_end</code> macros</li>
<li>Why and how to use the <code>const</code> type qualifier</li>
</ul>

<h2>Requirements</h2>

<ul>
<li>Allowed editors: <code>vi</code>, <code>vim</code>, <code>emacs</code></li>
<li>All your files will be compiled on Ubuntu 14.04 LTS</li>
<li>Your programs and functions will be compiled with <code>gcc</code> using the flags <code>-Wall</code> <code>-Werror</code> <code>-Wextra</code> <code>and -pedantic</code></li>
<li>All your files should end with a new line</li>
<li>A <code>README.md</code> file, at the root of the folder of the project is mandatory</li>
<li>Your code should use the <code>Betty</code> style. It will be checked using <a href="https://github.com/holbertonschool/Betty/blob/master/betty-style.pl">betty-style.pl</a> and <a href="https://github.com/holbertonschool/Betty/blob/master/betty-doc.pl">betty-doc.pl</a></li>
<li>You are not allowed to use global variables</li>
<li>No more than 5 functions per file</li>
<li>The only C standard library functions allowed are <code>malloc</code>, <code>free</code> and <code>exit</code>. Any use of functions like <code>printf</code>, <code>puts</code>, <code>calloc</code>, <code>realloc</code> etc... is forbidden</li>
<li>You are allowed to use the following macros: <code>va_start</code>, <code>va_arg</code> and <code>va_end</code></li>
<li>You are allowed to use <a href="https://github.com/holbertonschool/_putchar.c/blob/master/_putchar.c">_putchar</a></li>
<li>You don&#39;t have to push <code>_putchar.c</code>, we will use our file. If you do it won&#39;t be taken into account</li>
<li>In the following examples, the <code>main.c</code> files are showed as examples. You can use them to test your functions, but you don&#39;t have to push them to your repo (if you do we won&#39;t take them into account). We will use our own <code>main.c</code> files at compilation. Our <code>main.c</code> files might be different from the one showed in the examples</li>
<li>The prototypes of all your functions and the prototype of the function <code>_putchar</code> should be included in your header file called <code>variadic_functions.h</code></li>
<li>Don&#39;t forget to push your header file</li>
<li>All your header files should be include guarded</li>
</ul>

</article>

  <hr class="gap">
  <h2 class="gap">Tasks</h2>
  <section class="formatted-content">
        <div data-role="task963" data-position="1">
            <div class=" clearfix gap" id="task-963">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="963">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="963" data-toggle="modal" data-target="#task-963-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-963-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "Beauty is variable, ugliness is constant"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/963/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="963" >
            Help!
          </button>
    </div>

  <h4 class="task">
    0. Beauty is variable, ugliness is constant
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that returns the sum of all its parameters.</p>

<ul>
<li>Prototype: <code>int sum_them_all(const unsigned int n, ...);</code></li>
<li>If <code>n == 0</code>, return <code>0</code></li>
</ul>

<pre><code>julien@ubuntu:~/0x0f. variadic functions$ cat 0-main.c
#include &lt;stdio.h&gt;
#include &quot;variadic_functions.h&quot;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    int sum;

    sum = sum_them_all(2, 98, 1024);
    printf(&quot;%d\n&quot;, sum);
    sum = sum_them_all(4, 98, 1024, 402, -1024);
    printf(&quot;%d\n&quot;, sum);    
    return (0);
}
julien@ubuntu:~/0x0f. variadic functions$ gcc -Wall -pedantic -Werror -Wextra 0-main.c 0-sum_them_all.c -o a
julien@ubuntu:~/0x0f. variadic functions$ ./a 
1122
500
julien@ubuntu:~/0x0f. variadic functions$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0F-variadic_functions</code></li>
        <li>File: <code>0-sum_them_all.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task964" data-position="2">
            <div class=" clearfix gap" id="task-964">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="964">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="964" data-toggle="modal" data-target="#task-964-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-964-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "To be is to be the value of a variable"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/964/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="964" >
            Help!
          </button>
    </div>

  <h4 class="task">
    1. To be is to be the value of a variable
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that prints numbers, followed by a new line.</p>

<ul>
<li>Prototype: <code>void print_numbers(const char *separator, const unsigned int n, ...);</code></li>
<li>where <code>separator</code> is the string to be printed between numbers</li>
<li>and <code>n</code> is the number of integers passed to the function</li>
<li>You are allowed to use <code>printf</code></li>
<li>If <code>separator</code> is <code>NULL</code>, don&#39;t print it</li>
<li>Print a new line at the end of your function</li>
</ul>

<pre><code>julien@ubuntu:~/0x0f. variadic functions$ cat 1-main.c
#include &quot;variadic_functions.h&quot;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    print_numbers(&quot;, &quot;, 4, 0, 98, -1024, 402);
    return (0);
}
julien@ubuntu:~/0x0f. variadic functions$ gcc -Wall -pedantic -Werror -Wextra 1-main.c 1-print_numbers.c -o b
julien@ubuntu:~/0x0f. variadic functions$ ./b
0, 98, -1024, 402
julien@ubuntu:~/0x0f. variadic functions$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0F-variadic_functions</code></li>
        <li>File: <code>1-print_numbers.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task965" data-position="3">
            <div class=" clearfix gap" id="task-965">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="965">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="965" data-toggle="modal" data-target="#task-965-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-965-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "One woman&#39;s constant is another woman&#39;s variable"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/965/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="965" >
            Help!
          </button>
    </div>

  <h4 class="task">
    2. One woman&#39;s constant is another woman&#39;s variable
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that prints strings, followed by a new line.</p>

<ul>
<li>Prototype: <code>void print_strings(const char *separator, const unsigned int n, ...);</code></li>
<li>where <code>separator</code> is the string to be printed between the strings</li>
<li>and <code>n</code> is the number of strings passed to the function</li>
<li>You are allowed to use <code>printf</code></li>
<li>If separator is NULL, don&#39;t print it</li>
<li>If one of the string is NULL, print <code>(nil)</code> instead</li>
<li>Print a new line at the end of your function</li>
</ul>

<pre><code>julien@ubuntu:~/0x0f. Variadic functions$ cat 2-main.c#include &quot;variadic_functions.h&quot;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    print_strings(&quot;, &quot;, 2, &quot;Jay&quot;, &quot;Django&quot;);
    return (0);
}
julien@ubuntu:~/0x0f. Variadic functions$ gcc -Wall -pedantic -Werror -Wextra 2-main.c 2-print_strings.c -o c
julien@ubuntu:~/0x0f. Variadic functions$ ./c 
Jay, Django
julien@ubuntu:~/0x0f. Variadic functions$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0F-variadic_functions</code></li>
        <li>File: <code>2-print_strings.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task966" data-position="4">
            <div class=" clearfix gap" id="task-966">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="966">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="966" data-toggle="modal" data-target="#task-966-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-966-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "To be is a to be the value of a variable"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/966/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="966" >
            Help!
          </button>
    </div>

  <h4 class="task">
    3. To be is a to be the value of a variable
    <span class="alert alert-warning mandatory-optional">
      mandatory
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a function that prints anything.</p>

<ul>
<li>Prototype: <code>void print_all(const char * const format, ...);</code></li>
<li>where <code>format</code> is a list of types of arguments passed to the function

<ul>
<li><code>c</code>: <code>char</code></li>
<li><code>i</code>: <code>integer</code></li>
<li><code>f</code>: <code>float</code></li>
<li><code>s</code>: <code>char *</code> (if the string is NULL, print <code>(nil)</code> instead</li>
<li>any other char should be ignored</li>
<li>see example</li>
</ul></li>
<li>You are not allowed to use <code>for</code>, <code>goto</code>, ternary operator, <code>else</code>, <code>do ... while</code></li>
<li>You can use a maximum of

<ul>
<li>2 <code>while</code> loops</li>
<li>2 <code>if</code></li>
</ul></li>
<li>You can declare a maximum of <code>9</code> variables</li>
<li>You are allowed to use <code>printf</code></li>
<li>Print a new line at the end of your function</li>
</ul>

<pre><code>julien@ubuntu:~/0x0f. Variadic functions$ cat 3-main.c
#include &quot;variadic_functions.h&quot;

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
    print_all(&quot;ceis&quot;, &#39;H&#39;, 0, &quot;lberton&quot;);
    return (0);
}
julien@ubuntu:~/0x0f. Variadic functions$ gcc -Wall -pedantic -Werror -Wextra 3-main.c 3-print_all.c -o d
julien@ubuntu:~/0x0f. Variadic functions$ ./d 
H, 0, lberton
julien@ubuntu:~/0x0f. Variadic functions$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0F-variadic_functions</code></li>
        <li>File: <code>3-print_all.c</code></li>
    </ul>



  
      
</div>

        </div>
        <div data-role="task967" data-position="5">
            <div class=" clearfix gap" id="task-967">
<span id="user_id" data-id="100"></span>

    <div class="student_task_controls">
      
      <!-- button Done -->
        <button class="student_task_done btn btn-default no" data-task-id="967">
          <span class="no"><i class="fa fa-square-o"></i></span>
          <span class="yes"><i class="fa fa-check-square-o"></i></span>
          <span class="pending"><i class="fa fa-spinner fa-pulse"></i></span>
          Done<span class="no pending">?</span><span class="yes">!</span>
        </button>
        <br>
      
      <!-- button Who is done? -->
      <button class="users_done_for_task btn btn-default btn-sm" data-task-id="967" data-toggle="modal" data-target="#task-967-users-done-modal">
        Who is done?
      </button>
      <div class="modal fade users-done-modal" id="task-967-users-done-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title">Batchmates who are done with "Real programmers can write assembly code in any language"</h4>
            </div>
            <div class="modal-body">
              <div class="list-group">
              </div>
                  <a class="btn btn-default btn-sm student_task_help" data-confirm="Are you sure you wish to notify people?" href="/tasks/967/mark_as_help">Help!</a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- button Help! / Canel help -->
          <button class="student_task_help btn btn-default btn-sm" data-task-id="967" >
            Help!
          </button>
    </div>

  <h4 class="task">
    4. Real programmers can write assembly code in any language
    <span class="alert alert-info mandatory-optional">
      #advanced
    </span>
  </h4>


  <!-- Progress vs Score -->

  

  <p>Write a 64-bit program in assembly that prints <code>Hello, Holberton</code>, followed by a new line.</p>

<ul>
<li>You are only allowed to use the system call <code>write</code> (use an interrupt, not a call)</li>
<li>Your program will be compiled using <code>nasm</code> and <code>gcc</code> (as follows)</li>
</ul>

<pre><code>julien@ubuntu:~/0x0f. Variadic functions$ nasm -f elf64 100-hello_holberton.asm &amp;&amp; gcc 100-hello_holberton.o -o hello
julien@ubuntu:~/0x0f. Variadic functions$ ./hello 
Hello, Holberton
julien@ubuntu:~/0x0f. Variadic functions$ 
</code></pre>


    <p class="sm-gap"><strong>Repo:</strong></p>
    <ul>
      <li>GitHub repository: <code>holbertonschool-low_level_programming</code></li>
        <li>Directory: <code>0x0F-variadic_functions</code></li>
        <li>File: <code>100-hello_holberton.asm</code></li>
    </ul>



  
      
</div>

        </div>
  </section>






      </article>

    </main>





    

      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-67152800-6', 'auto');
        ga('send', 'pageview');
      </script>

  </body>
</html>
